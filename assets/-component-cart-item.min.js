var n=Object.defineProperty;var l=(i,e,t)=>e in i?n(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var r=(i,e,t)=>(l(i,typeof e!="symbol"?e+"":e,t),t);import{LitElement as o,html as a,css as c}from"./-global.min.js";var s=class extends o{constructor(){super()}connectedCallback(){super.connectedCallback();let{line:e,message:t}=window?.Shopify?.pendingCartUpdateErrorMessage||{};e===this.index&&(this._errorMessage=t)}onChange(e){this._isLoading=!0,e.detail.index=this.index}remove(e){e.preventDefault(),this.dispatchEvent(new CustomEvent("change",{bubbles:!0,composed:!0,detail:{value:0,index:this.index}}))}render(){return a` <div
      class="wrapper"
      style="${this._isLoading?"pointer-events: none; opacity: 0.5":""}"
    >
      <span class="media">
        ${this.item.image?a`
              <img
                src="${this.item.featured_image.url}"
                alt="${this.item.featured_image.alt}"
                loading="lazy"
                width="120"
                height="${160/this.item.featured_image.ratio}"
              />
            `:""}
      </span>
      <span class="details">
        <a href="${this.item.url}" class="name">${this.item.product_title}</a>
        ${this._errorMessage?a`
              <p class="error">
                <span class="error-text">${this._errorMessage}</span>
                <span @click="${()=>this._errorMessage=!1}">X</span>
              </p>
            `:""}
      </span>
      <span class="prices">
        <div class="price-wrapper">
          <span>${formatPrice(this.item.original_price)}</span>
        </div>
      </span>
      <span class="remove">
        <custom-link
          @click="${this.remove}"
          aria-label="${this.$t("sections.cart.remove_title","Remove",{title:this.item.title})}"
        >
          ${this.$t("sections.cart.remove","remove")}
        </custom-link>
      </span>
      <quantity-input
        class="quantity"
        @change="${this.onChange}"
        line="${this.index}"
        title="${this.item.product_title}"
        initial="${this.item.quantity}"
      ></quantity-input>
    </div>`}};r(s,"properties",{index:{type:Number},item:{converter(e){return JSON.parse(e.replaceAll("~~~",'"'))}},_isLoading:{state:!0},_errorMessage:{state:!0}}),r(s,"styles",c`
    .wrapper {
      padding-top: 20px;
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: repeat(2, 1fr);
    }
    .media {
      grid-row: 1 / 3;
      justify-self: stretch;
      align-self: center;
    }
    .name {
      color: var(--hh-color-foreground);
      text-decoration: none;
      display: block;
      font-size: 1.8rem;
      line-height: 1.2;
      font-weight: 600;
      word-break: break-word;
    }
    .name:hover {
      text-decoration: underline;
      text-underline-offset: 0.3rem;
      text-decoration-thickness: 0.2rem;
    }
    .remove {
      grid-column: 2;
      align-self: flex-end;
    }
    .quantity {
      grid-column: 3;
      align-self: flex-end;
    }
    .price-wrapper {
      display: flex;
      justify-content: flex-end;
      flex-wrap: wrap;
      margin: 0;
    }
  `);customElements.define("hh-cart-item",s);
